/*Version: 1.0.1
 * Creator: thatlonelybugbear
 * Colaborators: Fridan99
 * Need the Item Macro module
 * Create a item, go to details, set utility in the "Action Type", set default in the "Ability Modifier", On use macro: ItemMacro (After Active Effects)
 * Go to the Item Macro tab above, and paste the code
 */

const regions = {
  "Mountains & Hills [DC 15]": {dc: 15, food: ["Berries", "Fish", "Flowers", "Fruit", "Fungi", "Insects", "Meat", "Nuts", "Plants", "Seeds", "Roots", "Weeds"]},
  "Forest & Jungle [DC 10]": {dc: 10, food: ["Berries", "Fish", "Flowers", "Fruit", "Fungi", "Insects", "Meat", "Nuts", "Plants", "Roots", "Seeds", "Vegetables"]},
  "Desert [DC 20]": {dc: 20, food: ["Insects", "Meat", "Seeds", "Roots", "Weeds"]},
  "Dungeon & Underdark [DC 20]": {dc: 20, food: ["Berries", "Fish", "Flowers", "Fruit", "Fungi", "Meat", "Seeds", "Roots", "Weeds"]},
  "City [DC 15]": {dc: 15, food: ["Flowers", "Insects", "Meat", "Seeds", "Roots", "Rubbish", "Weeds"], note: "Note: the meat probably be bird, cat, dog, or rat"},
  "Artic [DC 20]": {dc: 20, food: ["Fish", "Meat", "Seeds", "Roots", "Weeds"]},
  "Swamp [DC 15]": {dc: 15, food: ["Berries", "Fish", "Flowers", "Fungi", "Insects", "Meat", "Seeds", "Roots", "Weeds"]},
  "Grassland [DC 10]": {dc: 10, food: ["Berries", "Flowers", "Fruit", "Insects", "Meat", "Seeds", "Roots", "Vegetables", "Weeds"]},
  "Coast [DC 10]": {dc: 10, food: ["Fish", "Fruit", "Mollusks", "Roots", "Seaweed", "Weeds"]}
};

const dialogOptions = Object.entries(regions).reduce((acc, [type, value]) => acc += `<option value="${type}">${type}</option>`, ``);

const title = 'Foraging';
const buttons = ["Advantage", "Normal", "Disadvantage"].map((i) => ({ label: i, callback: () => {
  const region = document.querySelector('#type')?.value;
  return {region, rollType: i } }}));
const content = `
<p>Choose a region and type of roll!</p>
<hr>
<form>
  <div class="form-group">
    <label for="type">Survival skill check</label>
    <div class="form-fields">
      <select id="type">${dialogOptions}</select>
    </div>
  </div>
</form>`;
const close = () => false;

const dialog = await Dialog.wait({ title, content, buttons, close }, { id: 'foraging-dialog' });
if (!dialog) return;
const diceFormula = dialog.rollType === 'Normal' ? '1d20' : '2d20';
const survivalRoll = await new Roll(`${diceFormula}${dialog.rollType === 'Advantage' ? 'kh' : dialog.rollType === 'Disadvantage' ? 'kl' : ''} + @skills.sur.total`, token.actor.getRollData()).evaluate();
let msg = await survivalRoll.toMessage({ flavor: `Survival skill check (the task takes 4h of effort)` });
await game.dice3d?.waitFor3DAnimationByMessageID(msg.id);

if (survivalRoll.total < regions[dialog.region].dc) {
  await ChatMessage.create({content: `You don't get food or water`});
} else {
  const wisMod = token.actor.system.abilities.wis.mod;
  const waterRoll = await new Roll(`1d6 + ${wisMod}`).evaluate();
  msg = await waterRoll.toMessage({ flavor: `You get in gallons of water` });
  await game.dice3d?.waitFor3DAnimationByMessageID(msg.id);
  const foodRoll = await new Roll(`1d6 + ${wisMod}`).evaluate();
  msg = await foodRoll.toMessage({ flavor: `You get in pounds of food` });
  await game.dice3d?.waitFor3DAnimationByMessageID(msg.id);

  const foodTypes = regions[dialog.region].food;
  const foodCount = foodRoll.total;
  const foodResult = {};
  for (let i = 0; i < foodCount; i++) {
    const foodType = foodTypes[Math.floor(Math.random() * foodTypes.length)];
    foodResult[foodType] = (foodResult[foodType] || 0) + 1;
  }
  const foodMessage = Object.entries(foodResult).sort().map(([type, count]) => `${count}x ${type}`).join(', ');
  await ChatMessage.create({content: `<b>You found the following types of food</b>: ${foodMessage}`});
if (dialog.region === "City [DC 15]") {
    await ChatMessage.create({content: `<span style="color:red">Note:</span> the meat probably be bird, cat, dog, or rat`});
  }
}
